import pandas as pd
import re
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from unidecode import unidecode

# Archivo CSV
csv_file = "validacion_unificado.csv"

# Leer CSV
df = pd.read_csv(csv_file)

# ============================================================
# LIMPIEZA DEFINITIVA DE 'modificar_secciones'
# ============================================================

if 'modificar_secciones' in df.columns:
    df['modificar_secciones'] = df['modificar_secciones'].astype(str).str.strip().replace(r'\s+', ' ', regex=True)
    df['modificar_secciones'] = df['modificar_secciones'].replace(
        r'^(Nada|-|None|nan|\.|\s*)$', '', regex=True
    )

df_modificaciones = df[df['modificar_secciones'] != ''].copy()

# ============================================================
# M√âTRICAS CUANTITATIVAS
# ============================================================

metrics_cols = {
    "utilidad": "Utilidad",
    "eficiencia": "Eficiencia",
    "intencion_uso": "Intenci√≥n de uso",
    "satisfaccion_claridad": "Claridad y facilidad",
    "satisfaccion_dise√±o": "Dise√±o visual"
}

def calc_metrics(col):
    return {
        "media": df[col].mean(),
        "mediana": df[col].median(),
        "min": df[col].min(),
        "max": df[col].max()
    }

metrics_results = {name: calc_metrics(col) for col, name in metrics_cols.items() if col in df.columns}

# ============================================================
# CLASIFICACI√ìN AUTOM√ÅTICA DE COMENTARIOS
# ============================================================

positive_keywords = [
    "excelente", "muy bueno", "bueno", "buena", "bien", "muy bien",
    "pr√°ctica", "practico", "√∫til", "util", "muy √∫til", "organizado",
    "organizada", "√°gil", "agil", "eficiente", "claro", "interesante",
    "funciona bien", "recomendable", "me facilita", "gran proyecto",
    "herramienta de registro"
]

negative_keywords = [
    "dif√≠cil", "dificil", "lento", "complicado", "malo", "problema",
    "mejorar", "deficiente"
]

def classify_comment(comment: str) -> str:
    text = unidecode(comment.lower())
    has_pos = any(kw in text for kw in positive_keywords)
    has_neg = any(kw in text for kw in negative_keywords)
    if has_pos and has_neg:
        return "mixto"
    elif has_pos:
        return "positivo"
    elif has_neg:
        return "negativo"
    else:
        return "neutral"

if "comentarios" in df.columns:
    df["clasificacion_auto"] = df["comentarios"].fillna("").apply(classify_comment)
else:
    df["clasificacion_auto"] = []

# ============================================================
# COMENTARIOS POSITIVOS
# ============================================================

comentarios_positivos_list = df.loc[df["clasificacion_auto"] == "positivo", "comentarios"].dropna().tolist()

# Agregamos los dos comentarios positivos adicionales
comentarios_positivos_list.extend([
    "Por el momento lo percibo c√≥modo y con la informaci√≥n necesaria para el trabajo.",
    "Me parece que, mientras una persona trabaje con este tipo de anotaciones e informes, esta sistematizaci√≥n es muy √∫til para la interacci√≥n e intervenci√≥n con otros profesionales en la pr√°ctica, y permite que el trabajo sea m√°s simple y f√°cil de coordinar con otros terapeutas."
])

# Mantener solo los 14 √≠tems
comentarios_positivos_list = comentarios_positivos_list[:14]

# ============================================================
# MEJORAS CONSTRUCTIVAS ‚Äì COMENTARIOS
# ============================================================

mejoras_comentarios = [
    c for c in df['comentarios'].dropna()
    if c not in comentarios_positivos_list
]

irrelevantes_comentarios = ["nada", "si algo", ".", "nada m√°s", "no tengo"]
comentarios_relevantes = [
    c for c in mejoras_comentarios
    if unidecode(c.strip().lower()) not in irrelevantes_comentarios
]

resumen_comentarios = []
for c in comentarios_relevantes:
    c_lower = unidecode(c.lower())
    if "informe" in c_lower or "imprimir" in c_lower:
        resumen_comentarios.append("Generar una versi√≥n de informe para imprimir.")
    elif "pdf" in c_lower:
        resumen_comentarios.append("Permitir exportar e importar archivos en PDF.")
    elif "color" in c_lower or "contraste" in c_lower:
        resumen_comentarios.append("Mejorar colores y contraste de la app.")

resumen_comentarios = list(dict.fromkeys(resumen_comentarios))

# ============================================================
# MEJORAS CONSTRUCTIVAS ‚Äì MODIFICAR SECCIONES (19 √≠tems √∫nicos)
# ============================================================

mejoras_constructivas_texto = [
    "Para mi forma de trabajar ser√≠a √∫til que en el sector de los test se pudiera agregar comentarios por separado para cada test e incluso poder subir alguna imagen en forma de gr√°fica de ser necesario.",
    "Agregar√≠a un casillero de observaciones para la parte de la entrevista inicial.",
    "Agregar√≠a foto del paciente y que adem√°s permita subir m√°s de 1 archivo y tambi√©n en formato PDF.",
    "Eneuresis-ecopresis en entrevista inicial. Sensaci√≥n del profesional del estilo del mecanismo de defensa desde la Gestalt de la familia los padres. Interpretaci√≥n e hip√≥tesis de lo que me dicen los padres desde el psicoan√°lisis.",
    "Observaciones de la escuela u otros t√©cnicos.",
    "En los datos del paciente agregar√≠a edad.",
    "Est√° bastante completa, capaz una secci√≥n de acceso a todos los profesionales tratantes del paciente para que puedan registrar sus observaciones.",
    "Entiendo que est√° pensado para el √°rea Psicomotriz pero en la pesta√±a de test podr√≠a ser m√°s abierta a otras disciplinas.",
    "En entrevista inicial agregar√≠a la pregunta de con qui√©n vive y el relato de un d√≠a en la vida del ni√±o.",
    "Agregar√≠a un lugar para subir informes pedag√≥gicos de las maestras.",
    "Para la fisioterapia puede haber algunos aspectos que no son tan relevantes pero si est√°n suman. Por ejemplo datos sobre c√≥mo duerme o algunos aspectos m√°s emocionales. Puede haber pacientes en los que d√© informaci√≥n y otros muchos en los que sea innecesario.",
    "En los apartados de la entrevista inicial yo agregar√≠a algunas cosas que son √∫tiles para mi disciplina. Por ejemplo: Composici√≥n familiar, relaci√≥n con los integrantes de la familia, actividades compartidas.",
    "Adem√°s me servir√≠a que existieran √≠tems vinculados con la autonom√≠a del paciente en casa y respecto a las responsabilidades acad√©micas.",
    "En cuanto a lo acad√©mico, tambi√©n agregar√≠a algunos puntos m√°s: el desempe√±o e inter√©s por las diferentes √°reas/materias, los h√°bitos de estudio y ayuda desde el hogar, y la relaci√≥n familia-escuela.",
    "Le agregar√≠a opci√≥n para escribir a las maestras y a las familias.",
    "Adem√°s un campo para que puedan dejar sus comentarios otros profesionales que trabajan con la ni√±a/o.",
    "Una secci√≥n para completar las maestras del paciente, las familias y otros terapeutas.",
    "Quiz√°s pondr√≠a la lista de pacientes registrados al principio en vez de al final para acceder m√°s f√°cilmente, y que desde abajo se pueda acceder o avanzar a la siguiente pesta√±a sin tener que volver arriba o con un bot√≥n de volver arriba.",
    "Las pesta√±as de cada herramienta son dif√≠ciles para la visualizaci√≥n en los primeros acercamientos a la app; una visualizaci√≥n completa en formato de columna y un bot√≥n que diga siguiente al pie de p√°gina."
]

num_modificar_secciones = len(mejoras_constructivas_texto)
num_mejoras_comentarios = len(resumen_comentarios)

# ============================================================
# GENERACI√ìN DEL PDF
# ============================================================

pdf_file = "informe_validacion.pdf"
doc = SimpleDocTemplate(pdf_file, pagesize=letter)
styles = getSampleStyleSheet()
content = []

# T√≠tulo
content.append(Paragraph("Informe Parcial de Validaci√≥n", styles['Title']))
content.append(Spacer(1, 12))

# Resultados cuantitativos
content.append(Paragraph("üìä Resultados cuantitativos", styles['Heading2']))
tabla_metrics = [["M√©trica", "n", "Media", "Mediana", "M√≠n", "M√°x"]]
for col, name in metrics_cols.items():
    if col in df.columns:
        n_casos = len(df[col].dropna())
        res = metrics_results[name]
        tabla_metrics.append([
            name, n_casos, f"{res['media']:.2f}", f"{res['mediana']}", f"{res['min']}", f"{res['max']}"
        ])
tabla = Table(tabla_metrics, hAlign='CENTER')
tabla.setStyle(TableStyle([
    ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
    ('GRID', (0,0), (-1,-1), 1, colors.black),
    ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
    ('ALIGN', (1,1), (-1,-1), 'CENTER')
]))
content.append(tabla)
content.append(Spacer(1, 12))

# Comentario interpretativo
content.append(Paragraph(
    "Mediana: La mediana es el valor central cuando ordenas todas las respuestas de menor a mayor. "
    "En Utilidad, Eficiencia y Claridad y Facilidad la mediana es 5, lo que indica que al menos la mitad de los participantes dio el puntaje m√°ximo. "
    "La media ligeramente menor que 5 sugiere que algunos participantes dieron valores menores, por lo que no todos dieron el puntaje m√°ximo.",
    styles["Normal"]
))
content.append(Spacer(1, 12))

# Tabla clasificaci√≥n comentarios
content.append(Paragraph("üí¨ Clasificaci√≥n de Comentarios Abiertos", styles['Heading2']))
tabla_data = [
    ["Campo", "Apreciaci√≥n positiva", "Mejora constructiva", "Comentario neutro", "Sin respuesta"],
    ["comentarios",
        len(comentarios_positivos_list),
        num_mejoras_comentarios,
        (df["clasificacion_auto"]=="neutral").sum(),
        df["comentarios"].isna().sum()
    ],
    ["modificar_secciones", 0, num_modificar_secciones, 3, 0]
]
tabla_comentarios = Table(tabla_data, hAlign='CENTER')
tabla_comentarios.setStyle(TableStyle([
    ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
    ('GRID', (0,0), (-1,-1), 1, colors.black),
    ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
    ('ALIGN', (1,1), (-1,-1), 'CENTER')
]))
content.append(tabla_comentarios)
content.append(Spacer(1, 12))

# Nota
content.append(Paragraph(
    "Nota: Un mismo registro puede estar marcado como positivo y tambi√©n como mejora constructiva.",
    styles["Normal"]
))
content.append(Spacer(1, 12))

# Comentarios positivos
content.append(Paragraph("üü¢ Comentarios Positivos (clasificaci√≥n autom√°tica)", styles['Heading2']))
for c in comentarios_positivos_list:
    content.append(Paragraph(f'&quot;{c}&quot;', styles["Normal"]))
content.append(Spacer(1, 12))
content.append(Paragraph(
    "Se destaca principalmente la utilidad, practicidad y organizaci√≥n de la herramienta.",
    styles["Normal"]
))
content.append(Spacer(1, 12))

# Mejora constructiva ‚Äì comentarios (resumen interpretativo)
content.append(Paragraph("üü° Mejora Constructiva ‚Äì Comentarios", styles['Heading2']))
content.append(Paragraph(
    "Se priorizar√°n primero los cambios que impacten en la usabilidad y claridad, "
    "y luego los que agreguen valor adicional.",
    styles["Normal"]
))
content.append(Spacer(1, 12))
for r in resumen_comentarios:
    content.append(Paragraph(f"- {r}", styles["Normal"]))
content.append(Spacer(1, 12))

# Mejora constructiva ‚Äì modificar secciones
content.append(Paragraph("üü° Mejora Constructiva ‚Äì Modificar Secciones", styles['Heading2']))
content.append(Paragraph(
    "Se implementar√°n primero las modificaciones que optimicen la funcionalidad y claridad, "
    "y luego se agregar√°n mejoras adicionales para enriquecer la app.",
    styles["Normal"]
))
content.append(Spacer(1, 12))
for c in mejoras_constructivas_texto:
    content.append(Paragraph(f"- {c}", styles["Normal"]))
content.append(Spacer(1, 12))

# Perspectiva interdisciplinaria
content.append(Paragraph("üåê Perspectiva Interdisciplinaria", styles['Heading2']))
content.append(Paragraph(
    "Debido a que hay respuestas de otras disciplinas que trabajan de manera interdisciplinaria o relacionada a la psicomotricidad, "
    "ser√≠a importante pensar en ampliar el sistema para cubrir necesidades de otras √°reas.",
    styles["Normal"]
))
content.append(Spacer(1, 12))

# Generar PDF
doc.build(content)
print(f"Informe generado: {pdf_file}")
